package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right), ((Scanner)getScanner()).yytext());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

/* Non-terminals */
terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

non terminal Program program;
non terminal ArrayAccess ArrayAccess;
non terminal ArrayTypeExpression ArrayTypeExpression;
non terminal AssignStatement AssignStatement;
non terminal BinaryExpression BinaryExpression;
non terminal CallStatement CallStatement;
non terminal CompoundStatement CompoundStatement;
non terminal EmptyStatement EmptyStatement;
non terminal Expression Expression;
non terminal Expression CompareExpression;
non terminal Expression MulExpression;
non terminal Expression AddExpression;
non terminal Expression UnaryExpression;
non terminal Expression PrimaryExpression;
non terminal GlobalDeclaration GlobalDeclaration;
non terminal IfStatement IfStatement;
non terminal IntLiteral IntLiteral;
non terminal NamedTypeExpression NamedTypeExpression;
non terminal Variable NamedVariable;
non terminal ParameterDeclaration ParameterDeclaration;
non terminal ProcedureDeclaration ProcDeclaration;
non terminal Statement Statement;
non terminal TypeDeclaration TypeDeclaration;
non terminal TypeExpression TypeExpression;
non terminal Variable Var;
non terminal VariableDeclaration VarDeclaration;
non terminal VariableExpression VarExpression;
non terminal WhileStatement WhileStatement;
non terminal List<GlobalDeclaration> GlobalDeclarationList;
non terminal List<Statement> StatementList;
non terminal List<ParameterDeclaration> ParameterList;
non terminal List<Expression> Arguments;
non terminal List<Expression> ArgList;
non terminal List<VariableDeclaration> VarList;
non terminal Expression NotEmptyArg;
non terminal Comma;
non terminal CompOperator;


start with program;
//alle nonterminale Begriffe definieren
//REKursion kommt öfters vor
//abstrakte Klassen weiterleiten (Bsp. GlobalDecl

program ::= GlobalDeclarationList:gdl {:RESULT= new Program(new Position(gdlleft,gdlright),gdl);:};
GlobalDeclarationList ::= GlobalDeclaration:gd  GlobalDeclarationList:gdl {:RESULT=cons(gd,gdl);:}|  {:RESULT=nil();:} ;
GlobalDeclaration ::= TypeDeclaration:td {:RESULT=td;:}| ProcDeclaration:pd {:RESULT=pd;:};

TypeDeclaration ::= TYPE:typ IDENT:id EQ NamedTypeExpression:npe SEMIC {:RESULT= new TypeDeclaration(new Position(typleft,typright),id,npe);:};
NamedTypeExpression ::= IDENT | ArrayTypeExpression:ate {:RESULT=ate;:};
ArrayTypeExpression ::= ARRAY:arr LBRACK INTLIT:inl RBRACK OF NamedTypeExpression:nte {:RESULT= new ArrayTypeExpression(new Position(arrleft,arrright),nte,inl);:};

ProcDeclaration ::= PROC:proc IDENT:id LPAREN ParameterList:pl RPAREN LCURL VarList:vl StatementList:sl RCURL {:RESULT= new ProcedureDeclaration(new Position(procleft,profright),id,pl,vl,sl);:};
VarList ::= VarDeclaration:vd VarList:vl {:RESULT=cons(vd,vl);:}| {:RESULT=nil();:};
VarDeclaration ::= VAR:vr IDENT:id COLON NamedTypeExpression:nte SEMIC {:RESULT= new VariableDeclaration(new Position(vrleft,vrright),id,nte);:};
ParameterList ::= ParameterDeclaration:pd ParameterList:pl {:RESULT=cons(pd,pl);:}| {:RESULT=nil();:};
ParameterDeclaration ::= IDENT COLON NamedTypeExpression Comma | REF COLON NamedTypeExpression Comma ;
Comma ::= {:RESULT=nil();:} | COMMA;
// eigenständig

StatementList ::= {:RESULT=nil();:} | Statement:sm StatementList:sl {:RESULT=cons(sm,sl);:};
Statement ::= IfStatement:is {:RESULT=is;:}| WhileStatement:ws {:RESULT=ws;:} | AssignStatement:as {:RESULT=as;:} | EmptyStatement:es {:RESULT=es;:}| CompoundStatement:cos {:RESULT=cos;:} | CallStatement:cas {:RESULT=cas;:};
IfStatement ::= IF:if LPAREN Expression:ex RPAREN  Statement:sm
    | IF:if LPAREN Expression:ex RPAREN Statement:sm ELSE Statement:sm;
WhileStatement ::= WHILE:wh LPAREN Expression:exp RPAREN Statement:sm {:RESULT= new WhileStatement(new Position(whleft,whright),exp,sm);:};
EmptyStatement ::= SEMIC;
AssignStatement ::= IDENT:id ASGN:asg Expression:exp {:RESULT= new WhileStatement(new Position(whleft,whright),asg,exp);:};
CompoundStatement ::= LCURL StatementList:sl RCURL {:RESULT=sl;:};
CallStatement ::= IDENT LPAREN Arguments  RPAREN;
Arguments ::= ArgList:al {:RESULT=al;:}|  {:RESULT=nil();:} ;
ArgList ::= NotEmptyArg:nea {:RESULT=nea;:} | NotEmptyArg:nea  COMMA ArgList:al {:RESULT=nea,al;:};
NotEmptyArg ::= Expression:exp {:RESULT=exp;:};
Expression ::= CompareExpression:coe {:RESULT=coe;:};
CompOperator ::= LT | LE | GT | GE | NE | EQ;
CompareExpression ::= AddExpression | AddExpression CompOperator AddExpression;
AddExpression ::= MulExpression | AddExpression PLUS MulExpression | AddExpression MINUS MulExpression;
MulExpression ::= UnaryExpression | MulExpression STAR UnaryExpression | MulExpression SLASH UnaryExpression;
UnaryExpression ::= PrimaryExpression | MINUS UnaryExpression;
PrimaryExpression ::= LPAREN Expression RPAREN | IntLiteral | VarExpression;
IntLiteral ::= INTLIT;
VarExpression ::= NamedVariable;
NamedVariable ::= IDENT | ArrayAccess;
ArrayAccess ::= NamedVariable LBRACK Expression RBRACK;
